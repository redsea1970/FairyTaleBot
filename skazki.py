import requests
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, CallbackContext,
    MessageHandler, Filters, CallbackQueryHandler
)
import os
from dotenv import load_dotenv
from enum import Enum, auto
import tempfile

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
class ConversationState(Enum):
    START = auto()
    AGE = auto()
    NAME = auto()
    FAMILY = auto()
    PETS = auto()
    INTERESTS = auto()
    SITUATION = auto()
    REQUEST = auto()
    VOICE_SELECTION = auto()


class FairyTaleBot:
    def __init__(self):
        self.user_data = {}
        self.api_key = os.getenv("YANDEX_API_KEY")
        self.folder_id = os.getenv("YANDEX_FOLDER_ID")
        self.speech_api_key = os.getenv("YANDEX_SPEECH_API_KEY")

    def start(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        self.user_data[update.effective_chat.id] = {
            'state': ConversationState.START,
            'answers': {}
        }

        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫–∞–∑–∫–∏", callback_data='start_creation')]
        ]

        update.message.reply_text(
            "üìñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∫–∞–∑–∫–æ–ë–æ—Ç!\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∫–∞–∑–∫—É –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    def start_creation(self, update: Update, context: CallbackContext) -> None:
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∞–∑–∫–∏"""
        query = update.callback_query
        query.answer()

        chat_id = query.message.chat_id
        self.user_data[chat_id]['state'] = ConversationState.AGE

        query.edit_message_text(
            "üë∂ –°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤–∞—à–µ–º—É —Ä–µ–±—ë–Ω–∫—É? (–û—Ç 2 –¥–æ 10 –ª–µ—Ç)",
            reply_markup=self._age_keyboard()
        )

    def _age_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        ages = [str(i) for i in range(2, 11)]
        buttons = [InlineKeyboardButton(age, callback_data=f"age_{age}") for age in ages]
        keyboard = [buttons[i:i + 3] for i in range(0, len(buttons), 3)]
        return InlineKeyboardMarkup(keyboard)

    def process_age(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        query = update.callback_query
        query.answer()

        chat_id = query.message.chat_id
        age = query.data.split('_')[1]
        self.user_data[chat_id]['answers']['age'] = age
        self.user_data[chat_id]['state'] = ConversationState.NAME

        query.edit_message_text(
            f"–û—Ç–ª–∏—á–Ω–æ, –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∫–∞–∑–∫—É –¥–ª—è {age}-–ª–µ—Ç–Ω–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞.\n\n"
            "üìõ –ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞? (–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è)",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_name")]])
        )

    def process_name(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ä–µ–±—ë–Ω–∫–∞"""
        chat_id = update.effective_chat.id

        if update.callback_query and update.callback_query.data == "skip_name":
            self.user_data[chat_id]['answers']['name'] = ""
            update.callback_query.answer()
            update.callback_query.edit_message_text(
                "–•–æ—Ä–æ—à–æ, —Å–∫–∞–∑–∫–∞ –±—É–¥–µ—Ç –±–µ–∑ –∏–º–µ–Ω–∏.\n\n"
                "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞–ø–∏—à–∏—Ç–µ, –∫—Ç–æ –µ—Å—Ç—å –≤ –≤–∞—à–µ–π —Å–µ–º—å–µ (—Ä–æ–¥–∏—Ç–µ–ª–∏, –±—Ä–∞—Ç—å—è/—Å—ë—Å—Ç—Ä—ã).",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_family")]])
            )
        else:
            name = update.message.text
            self.user_data[chat_id]['answers']['name'] = name
            update.message.reply_text(
                f"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –∏–º—è - {name}!\n\n"
                "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞–ø–∏—à–∏—Ç–µ, –∫—Ç–æ –µ—Å—Ç—å –≤ –≤–∞—à–µ–π —Å–µ–º—å–µ (—Ä–æ–¥–∏—Ç–µ–ª–∏, –±—Ä–∞—Ç—å—è/—Å—ë—Å—Ç—Ä—ã).",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_family")]])
            )

        self.user_data[chat_id]['state'] = ConversationState.FAMILY

    def process_family(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–º—å–µ"""
        chat_id = update.effective_chat.id

        if update.callback_query and update.callback_query.data == "skip_family":
            self.user_data[chat_id]['answers']['family'] = ""
            update.callback_query.answer()
            update.callback_query.edit_message_text(
                "–•–æ—Ä–æ—à–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–º—å–µ.\n\n"
                "üê∂ –ï—Å—Ç—å –ª–∏ —É –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ –ø–∏—Ç–æ–º—Ü—ã? –û–ø–∏—à–∏—Ç–µ –∏—Ö.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_pets")]])
            )
        else:
            text = update.message.text if hasattr(update, 'message') else ""
            self.user_data[chat_id]['answers']['family'] = text
            update.message.reply_text(
                "üê∂ –ï—Å—Ç—å –ª–∏ —É –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ –ø–∏—Ç–æ–º—Ü—ã? –û–ø–∏—à–∏—Ç–µ –∏—Ö.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_pets")]])
            )

        self.user_data[chat_id]['state'] = ConversationState.PETS

    def process_pets(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏—Ç–æ–º—Ü–∞—Ö"""
        chat_id = update.effective_chat.id

        if update.callback_query and update.callback_query.data == "skip_pets":
            self.user_data[chat_id]['answers']['pets'] = ""
            update.callback_query.answer()
            update.callback_query.edit_message_text(
                "–•–æ—Ä–æ—à–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ç–æ–º—Ü–∞—Ö.\n\n"
                "üé® –ö–∞–∫–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è —É –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞? (–∏–≥—Ä—É—à–∫–∏, –≥–µ—Ä–æ–∏, –∑–∞–Ω—è—Ç–∏—è)",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_interests")]])
            )
        else:
            text = update.message.text if hasattr(update, 'message') else ""
            self.user_data[chat_id]['answers']['pets'] = text
            update.message.reply_text(
                "üé® –ö–∞–∫–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è —É –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞? (–∏–≥—Ä—É—à–∫–∏, –≥–µ—Ä–æ–∏, –∑–∞–Ω—è—Ç–∏—è)",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_interests")]])
            )

        self.user_data[chat_id]['state'] = ConversationState.INTERESTS

    def process_interests(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö"""
        chat_id = update.effective_chat.id

        if update.callback_query and update.callback_query.data == "skip_interests":
            self.user_data[chat_id]['answers']['interests'] = ""
            update.callback_query.answer()
            update.callback_query.edit_message_text(
                "–•–æ—Ä–æ—à–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö.\n\n"
                "üõë –ö–∞–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —É —Ä–µ–±—ë–Ω–∫–∞?",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_situation")]])
            )
        else:
            text = update.message.text if hasattr(update, 'message') else ""
            self.user_data[chat_id]['answers']['interests'] = text
            update.message.reply_text(
                "üõë –ö–∞–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —É —Ä–µ–±—ë–Ω–∫–∞?",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_situation")]])
            )

        self.user_data[chat_id]['state'] = ConversationState.SITUATION

    def process_situation(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Ç—É–∞—Ü–∏–∏"""
        chat_id = update.effective_chat.id

        if update.callback_query and update.callback_query.data == "skip_situation":
            self.user_data[chat_id]['answers']['situation'] = ""
            update.callback_query.answer()
            update.callback_query.edit_message_text(
                "–•–æ—Ä–æ—à–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Ç—É–∞—Ü–∏–∏.\n\n"
                "üìù –ö–∞–∫–æ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—é–∂–µ—Ç –∏–ª–∏ –ø–æ—Å—ã–ª —Å–∫–∞–∑–∫–∏?",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_request")]])
            )
        else:
            text = update.message.text if hasattr(update, 'message') else ""
            self.user_data[chat_id]['answers']['situation'] = text
            update.message.reply_text(
                "üìù –ö–∞–∫–æ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—é–∂–µ—Ç –∏–ª–∏ –ø–æ—Å—ã–ª —Å–∫–∞–∑–∫–∏?",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_request")]])
            )

        self.user_data[chat_id]['state'] = ConversationState.REQUEST

    def process_request(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–∫–∞–∑–∫—É"""
        chat_id = update.effective_chat.id

        if update.callback_query and update.callback_query.data == "skip_request":
            self.user_data[chat_id]['answers']['request'] = ""
            update.callback_query.answer()
        else:
            text = update.message.text if hasattr(update, 'message') else ""
            self.user_data[chat_id]['answers']['request'] = text

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫–∞–∑–∫–∏
        context.bot.send_chat_action(chat_id=chat_id, action="typing")
        fairy_tale = self._generate_fairy_tale(self._generate_prompt(self.user_data[chat_id]['answers']))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–∞–∑–∫—É
        self.user_data[chat_id]['fairy_tale'] = fairy_tale
        self.user_data[chat_id]['state'] = ConversationState.VOICE_SELECTION

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫–∞–∑–∫—É
        if hasattr(update, 'message'):
            update.message.reply_text(fairy_tale)
        else:
            update.callback_query.message.reply_text(fairy_tale)

        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞
        keyboard = [
            [InlineKeyboardButton("üîä –ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å", callback_data='voice_male'),
             InlineKeyboardButton("üîä –ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å", callback_data='voice_female')],
            [InlineKeyboardButton("üîä –ú—É–ª—å—Ç—è—à–Ω—ã–π –≥–æ–ª–æ—Å", callback_data='voice_cartoon'),
             InlineKeyboardButton("‚ùå –ë–µ–∑ –æ–∑–≤—É—á–∫–∏", callback_data='voice_none')]
        ]

        if hasattr(update, 'message'):
            update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–∑–≤—É—á–∫–∏ —Å–∫–∞–∑–∫–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            update.callback_query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–∑–≤—É—á–∫–∏ —Å–∫–∞–∑–∫–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

    def _generate_prompt(self, answers: dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ò–ò"""
        prompt = "–ù–∞–ø–∏—à–∏ –¥–µ—Ç—Å–∫—É—é —Å–∫–∞–∑–∫—É —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n"
        prompt += f"- –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞: {answers.get('age', '–Ω–µ —É–∫–∞–∑–∞–Ω')} –ª–µ—Ç\n"

        if answers.get('name'):
            prompt += f"- –ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π: {answers['name']}\n"
        if answers.get('family'):
            prompt += f"- –ß–ª–µ–Ω—ã —Å–µ–º—å–∏: {answers['family']}\n"
        if answers.get('pets'):
            prompt += f"- –ü–∏—Ç–æ–º—Ü—ã: {answers['pets']}\n"
        if answers.get('interests'):
            prompt += f"- –ò–Ω—Ç–µ—Ä–µ—Å—ã: {answers['interests']}\n"
        if answers.get('situation'):
            prompt += f"- –ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: {answers['situation']}\n"
        if answers.get('request'):
            prompt += f"- –ñ–µ–ª–∞–µ–º—ã–π –ø–æ—Å—ã–ª: {answers['request']}\n"

        prompt += (
            "\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∫–∞–∑–∫–µ:\n"
            "1. –ü—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É\n"
            "2. –í–∫–ª—é—á–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏\n"
            "3. –ù–µ–Ω–∞–≤—è–∑—á–∏–≤—ã–π –ø–æ—Å—ã–ª\n"
            "4. –£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Å—é–∂–µ—Ç\n"
            "5. –î–ª–∏–Ω–∞ 500-700 —Å–ª–æ–≤\n"
            "6. –î–∏–∞–ª–æ–≥–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è\n"
            "7. –ú–æ—Ä–∞–ª—å –≤ –∫–æ–Ω—Ü–µ\n"
            "–§–æ—Ä–º–∞—Ç:\n–ù–∞–∑–≤–∞–Ω–∏–µ\n\n–¢–µ–∫—Å—Ç...\n\n–ú–æ—Ä–∞–ª—å: ..."
        )
        return prompt

    def _generate_fairy_tale(self, prompt: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫–∞–∑–∫–∏ —á–µ—Ä–µ–∑ YandexGPT"""
        headers = {
            "Authorization": f"Api-Key {self.api_key}",
            "Content-Type": "application/json",
            "x-folder-id": self.folder_id
        }

        payload = {
            "modelUri": f"gpt://{self.folder_id}/yandexgpt-lite",
            "completionOptions": {
                "stream": False,
                "temperature": 0.7,
                "maxTokens": 2000
            },
            "messages": [
                {
                    "role": "system",
                    "text": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π –ø–∏—Å–∞—Ç–µ–ª—å"
                },
                {
                    "role": "user",
                    "text": prompt
                }
            ]
        }

        try:
            response = requests.post(
                "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
                headers=headers,
                json=payload,
                timeout=30
            )
            response.raise_for_status()
            return response.json()["result"]["alternatives"][0]["message"]["text"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫–∞–∑–∫–∏: {str(e)}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫–∞–∑–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def process_voice_selection(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞"""
        query = update.callback_query
        query.answer()

        chat_id = query.message.chat_id
        voice_type = query.data.split('_')[1]
        fairy_tale = self.user_data[chat_id]['fairy_tale']

        if voice_type == 'none':
            context.bot.send_message(
                chat_id=chat_id,
                text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ –æ–∑–≤—É—á–∏–≤–∞—Ç—å —Å–∫–∞–∑–∫—É.\n\n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
            )
            return

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
            audio_file = temp_file.name

        # –û–∑–≤—É—á–∏–≤–∞–µ–º
        processing_msg = context.bot.send_message(
            chat_id=chat_id,
            text="üîä –û–∑–≤—É—á–∏–≤–∞–µ–º —Å–∫–∞–∑–∫—É... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )

        try:
            if self._generate_voice(fairy_tale, voice_type, audio_file):
                with open(audio_file, 'rb') as audio:
                    context.bot.send_audio(
                        chat_id=chat_id,
                        audio=audio,
                        caption="–í–∞—à–∞ –æ–∑–≤—É—á–µ–Ω–Ω–∞—è —Å–∫–∞–∑–∫–∞!",
                        title="–°–∫–∞–∑–∫–∞",
                        timeout=30
                    )
            else:
                context.bot.send_message(
                    chat_id=chat_id,
                    text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å —Å–∫–∞–∑–∫—É. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –µ—ë –≤—ã—à–µ."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏: {str(e)}")
            context.bot.send_message(
                chat_id=chat_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∫–µ."
            )
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            if os.path.exists(audio_file):
                os.remove(audio_file)
            context.bot.delete_message(
                chat_id=chat_id,
                message_id=processing_msg.message_id
            )

            context.bot.send_message(
                chat_id=chat_id,
                text="–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–∫–∞–∑–∫—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
            )

    def _generate_voice(self, text: str, voice_type: str, output_file: str) -> bool:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ SpeechKit"""
        if not self.speech_api_key:
            logger.error("–ù–µ –∑–∞–¥–∞–Ω API –∫–ª—é—á SpeechKit")
            return False

        voice = {
            'male': 'filipp',
            'female': 'alena',
            'cartoon': 'zahar'
        }.get(voice_type, 'filipp')

        headers = {
            "Authorization": f"Api-Key {self.speech_api_key}",
        }

        data = {
            "text": text[:5000],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ API
            "lang": "ru-RU",
            "voice": voice,
            "speed": "1.0",
            "format": "oggopus",
            "emotion": "good"
        }

        try:
            response = requests.post(
                "https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize",
                headers=headers,
                data=data,
                stream=True,
                timeout=30
            )
            response.raise_for_status()

            with open(output_file, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ SpeechKit: {str(e)}")
            return False

    def handle_message(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id

        if chat_id not in self.user_data:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return

        state = self.user_data[chat_id]['state']

        if state == ConversationState.NAME:
            self.process_name(update, context)
        elif state == ConversationState.FAMILY:
            self.process_family(update, context)
        elif state == ConversationState.PETS:
            self.process_pets(update, context)
        elif state == ConversationState.INTERESTS:
            self.process_interests(update, context)
        elif state == ConversationState.SITUATION:
            self.process_situation(update, context)
        elif state == ConversationState.REQUEST:
            self.process_request(update, context)
        else:
            update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start"
            )


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    required_vars = [
        "YANDEX_API_KEY",
        "YANDEX_FOLDER_ID",
        "YANDEX_SPEECH_API_KEY",
        "TELEGRAM_BOT_TOKEN"
    ]

    missing_vars = [var for var in required_vars if not os.getenv(var)]
    if missing_vars:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω—ã: {', '.join(missing_vars)}")
        return

    bot = FairyTaleBot()
    updater = Updater(os.getenv("TELEGRAM_BOT_TOKEN"))
    dispatcher = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", bot.start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    dispatcher.add_handler(CallbackQueryHandler(bot.start_creation, pattern='^start_creation$'))
    dispatcher.add_handler(CallbackQueryHandler(bot.process_age, pattern='^age_'))
    dispatcher.add_handler(CallbackQueryHandler(bot.process_name, pattern='^skip_name$'))
    dispatcher.add_handler(CallbackQueryHandler(bot.process_family, pattern='^skip_family$'))
    dispatcher.add_handler(CallbackQueryHandler(bot.process_pets, pattern='^skip_pets$'))
    dispatcher.add_handler(CallbackQueryHandler(bot.process_interests, pattern='^skip_interests$'))
    dispatcher.add_handler(CallbackQueryHandler(bot.process_situation, pattern='^skip_situation$'))
    dispatcher.add_handler(CallbackQueryHandler(bot.process_request, pattern='^skip_request$'))
    dispatcher.add_handler(CallbackQueryHandler(bot.process_voice_selection, pattern='^voice_'))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, bot.handle_message))

    updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.idle()


if __name__ == '__main__':
    main()